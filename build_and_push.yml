# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-16.04'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
    - task: UseDotNet@2
      displayName: install dotnet runtime 3.0
      inputs:
        version: '3.0.x'
    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        verbosityRestore: 'Normal'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration Release' # Update this to match your need
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/*.csproj'
    - task: CopyFiles@2
      displayName: copy terraform files
      inputs:
       SourceFolder: 'terraform/'
       Contents: '**.tf'
       TargetFolder: '$(build.artifactstagingdirectory)'
    - task: PublishBuildArtifacts@1
      displayName: create terraform artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    - task: Docker@2
      displayName: docker build and push
      inputs:
        containerRegistry: 'akspochelloworld'
        repository: 'helloword_azpoc'
        command: 'buildAndPush'
        Dockerfile: 'Src/HelloWorld/HelloWorld/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

    - task: Docker@2
      displayName: docker build and push
      inputs:
        containerRegistry: 'akspochelloworld'
        repository: 'shopping-cart'
        command: 'buildAndPush'
        Dockerfile: 'Src/ShoppingCart/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
    - task: Docker@2
      displayName: docker build and push
      inputs:
        containerRegistry: 'akspochelloworld'
        repository: 'shipping-provider'
        command: 'buildAndPush'
        Dockerfile: 'Src/ShippingProvider/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
    - task: Docker@2
      displayName: docker build and push
      inputs:
        containerRegistry: 'akspochelloworld'
        repository: 'inventory-provider'
        command: 'buildAndPush'
        Dockerfile: 'Src/InventoryProvider/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
    - task: AzureCLI@2
      displayName: initialize helm client
      inputs:
        azureSubscription: 'Pay-As-You-Go(136f4268-7dd0-446b-ab31-ec197ff147d5)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          helm init -c
    - task: HelmDeploy@0
      displayName: create helm package
      inputs:
        command: 'package'
        chartPath: 'kubernates/helloworld/'
        updateDependency: true
    - task: HelmDeploy@0
      displayName: create helm package
      inputs:
        command: 'package'
        chartPath: 'kubernates/shopping-cart/'
        updateDependency: true
    - task: AzureCLI@2
      displayName: push helm package to acr
      inputs:
        azureSubscription: 'Pay-As-You-Go(136f4268-7dd0-446b-ab31-ec197ff147d5)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cd ../a
          ls
          docker login akspochelloworld.azurecr.io -p $(acrpassword) -u akspochelloworld
          az configure --defaults acr=akspochelloworld
          az acr helm repo add
          az acr helm push *.tgz --name akspochelloworld > program.stdout 2> program.stderr
          echo '------error------'
          cat program.stderr
          echo '++++++out++++++'
          cat program.stdout
        useGlobalConfig: true
