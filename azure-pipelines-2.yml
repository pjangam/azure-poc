# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5d911ca7-6668-422d-af12-f37d346a1529'
  imageRepository: 'pjangamazurepoc'
  containerRegistry: 'akspochelloworld.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'akspochelloworld418f-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'

    - upload: manifests
      artifact: manifests
      
- stage: Deploy
  displayName: Deploy stage

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'pjangamazurepoc.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/tiller.yml
                $(Pipeline.Workspace)/manifests/ingress.yml
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Pay-As-You-Go(136f4268-7dd0-446b-ab31-ec197ff147d5)'
              azureResourceGroup: 'firstapp-resources'
              kubernetesCluster: 'hello'
              namespace: 'default'
              command: 'init'

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Pay-As-You-Go(136f4268-7dd0-446b-ab31-ec197ff147d5)'
              azureResourceGroup: 'firstapp-resources'
              kubernetesCluster: 'hello'
              namespace: 'default'
              command: 'repo'
              arguments: 'add nginx https://helm.nginx.com/stable'

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Pay-As-You-Go(136f4268-7dd0-446b-ab31-ec197ff147d5)'
              azureResourceGroup: 'firstapp-resources'
              kubernetesCluster: 'hello'
              namespace: 'default'
              command: 'repo'
              arguments: 'update'

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Pay-As-You-Go(136f4268-7dd0-446b-ab31-ec197ff147d5)'
              azureResourceGroup: 'firstapp-resources'
              kubernetesCluster: 'hello'
              namespace: 'default'
              command: 'install'
              arguments: 'ingress nginx/nginx-ingress --version 0.3.8'

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Pay-As-You-Go(136f4268-7dd0-446b-ab31-ec197ff147d5)'
              azureResourceGroup: 'firstapp-resources'
              kubernetesCluster: 'hello'
              namespace: 'default'
              command: 'ls'
